# Copyright Thoughtworks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###############################################################################################
# This file is autogenerated by the repository at https://github.com/gocd/gocd.
# Please file any issues or PRs at https://github.com/gocd/gocd
###############################################################################################

FROM cgr.dev/chainguard/bash:latest AS gocd-agent-unzip
ARG TARGETARCH
ARG UID=1000
RUN curl --fail --location --silent --show-error "https://download.gocd.org/binaries/25.3.0-20862/generic/go-agent-25.3.0-20862.zip" > /tmp/go-agent-25.3.0-20862.zip && \
    unzip -q /tmp/go-agent-25.3.0-20862.zip -d / && \
    mkdir -p /go-agent/wrapper /go-agent/bin && \
    mv -v /go-agent-25.3.0/LICENSE /go-agent/LICENSE && \
    mv -v /go-agent-25.3.0/*.md /go-agent && \
    mv -v /go-agent-25.3.0/bin/go-agent /go-agent/bin/go-agent && \
    mv -v /go-agent-25.3.0/lib /go-agent/lib && \
    mv -v /go-agent-25.3.0/logs /go-agent/logs && \
    mv -v /go-agent-25.3.0/run /go-agent/run && \
    mv -v /go-agent-25.3.0/wrapper-config /go-agent/wrapper-config && \
    WRAPPERARCH=$(if [ $TARGETARCH == amd64 ]; then echo x86-64; elif [ $TARGETARCH == arm64 ]; then echo arm-64; else echo $TARGETARCH is unknown!; exit 1; fi) && \
    mv -v /go-agent-25.3.0/wrapper/wrapper-linux-$WRAPPERARCH* /go-agent/wrapper/ && \
    mv -v /go-agent-25.3.0/wrapper/libwrapper-linux-$WRAPPERARCH* /go-agent/wrapper/ && \
    mv -v /go-agent-25.3.0/wrapper/wrapper.jar /go-agent/wrapper/ && \
    chown -R ${UID}:0 /go-agent && chmod -R g=u /go-agent
FROM frolvlad/alpine-glibc:alpine-3 AS multistageinput
FROM docker.io/docker:dind
ARG TARGETARCH

LABEL gocd.version="25.3.0" \
  description="GoCD agent based on docker.io/docker:dind" \
  maintainer="GoCD Team <go-cd-dev@googlegroups.com>" \
  url="https://www.gocd.org" \
  gocd.full.version="25.3.0-20862" \
  gocd.git.sha="e48df223c27445d22c88cd58e5218bebd4fa9496"

ADD https://github.com/krallin/tini/releases/download/v0.19.0/tini-static-${TARGETARCH} /usr/local/sbin/tini

# force encoding
ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8
ENV LANG="C.UTF-8"
ENV GO_JAVA_HOME="/gocd-jre"

ARG UID=1000
ARG GID=1000
COPY --from=multistageinput /usr/glibc-compat /usr/glibc-compat
RUN \
# add mode and permissions for files we added above
  chmod 0755 /usr/local/sbin/tini && \
  chown root:root /usr/local/sbin/tini && \
  apk --no-cache upgrade && \
# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
  adduser -D -u ${UID} -s /bin/bash -G root go && \
  adduser go docker && \
  apk add --no-cache git openssh-client bash curl procps && \
  apk add --no-cache sudo && \
  # install glibc for the Tanuki Wrapper, and use by glibc-linked Adoptium JREs && \
    GLIBC_DIR=/usr/glibc-compat && \
    GLIBC_LIB=$([ "$(arch)" = "aarch64" ] && echo ld-linux-aarch64.so.1 || echo ld-linux-x86-64.so.2) && \
    ln -s ${GLIBC_DIR}/lib/${GLIBC_LIB} /lib/${GLIBC_LIB} && \
    mkdir -p /lib64 && ln -s ${GLIBC_DIR}/lib/${GLIBC_LIB} /lib64/${GLIBC_LIB} && \
    ln -s ${GLIBC_DIR}/etc/ld.so.cache /etc/ld.so.cache && \
    echo "export LANG=C.UTF-8" > /etc/profile.d/locale.sh && \
    ${GLIBC_DIR}/sbin/ldconfig && \
  # end installing glibc && \
  curl --fail --location --silent --show-error "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.8%2B9/OpenJDK21U-jre_$(uname -m | sed -e s/86_//g)_linux_hotspot_21.0.8_9.tar.gz" --output /tmp/jre.tar.gz && \
  mkdir -p /gocd-jre && \
  tar -xf /tmp/jre.tar.gz -C /gocd-jre --strip 1 && \
  rm -rf /tmp/jre.tar.gz && \
  mkdir -p /go-agent /docker-entrypoint.d /go /godata

ADD docker-entrypoint.sh /


COPY --from=gocd-agent-unzip /go-agent /go-agent
# ensure that logs are printed to console output
COPY --chown=go:root agent-bootstrapper-logback-include.xml agent-launcher-logback-include.xml agent-logback-include.xml /go-agent/config/
COPY --chown=root:root dockerd-sudo /etc/sudoers.d/dockerd-sudo

RUN chown -R go:root /docker-entrypoint.d /go /godata /docker-entrypoint.sh && \
    chmod -R g=u /docker-entrypoint.d /go /godata /docker-entrypoint.sh

  COPY --chown=root:root run-docker-daemon.sh /

ENTRYPOINT ["/docker-entrypoint.sh"]

USER go
